
--- testing NULL neighbor_ident_list
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi1) --> expect rc=-ENOMEM, got -12
     (empty)
neighbor_ident_get(k(1, BSIC_6BIT, 2)) --> NULL
neighbor_ident_del(k(1, BSIC_6BIT, 2)) --> nothing deleted
     (empty)

--- adding entries, test that no two identical entries are added
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi1) --> expect rc=1, got 1
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_get(k(1, BSIC_6BIT, 2)) --> entry returned
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi1) --> expect rc=1, got 1
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi2) --> expect rc=2, got 2
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi2) --> expect rc=2, got 2
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
neighbor_ident_del(k(1, BSIC_6BIT, 2)) --> entry deleted
     (empty)

--- Cannot mix cell identifier types for one entry
neighbor_ident_add(k(1, BSIC_6BIT, 2), &cgi1) --> expect rc=1, got 1
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(1, BSIC_6BIT, 2), &lac1) --> expect rc=-EINVAL, got -22
  0: ARFCN 1 BSIC 2
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_del(k(1, BSIC_6BIT, 2)) --> entry deleted
     (empty)

--- BSIC matching: 6bit and 9bit are different realms, and wildcard match is weaker
neighbor_ident_add(k(1, BSIC_NONE, 0), &cgi1) --> expect rc=1, got 1
  0: ARFCN 1 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(1, BSIC_6BIT, 2), &lac1) --> expect rc=1, got 1
  0: ARFCN 1 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 1 BSIC 2
     cell_id_list lac[1] = {
       0: 123
     }
neighbor_ident_add(k(1, BSIC_9BIT, 2), &lac2) --> expect rc=2, got 2
  0: ARFCN 1 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 1 BSIC 2
     cell_id_list lac[1] = {
       0: 123
     }
  2: ARFCN 1 BSIC 2(9bit)
     cell_id_list lac[2] = {
       0: 456
       1: 789
     }
neighbor_ident_get(k(1, BSIC_6BIT, 2)) --> entry returned
     cell_id_list lac[1] = {
       0: 123
     }
neighbor_ident_get(k(1, BSIC_9BIT, 2)) --> entry returned
     cell_id_list lac[2] = {
       0: 456
       1: 789
     }
--- wildcard matches both 6bit and 9bit BSIC regardless:
neighbor_ident_get(k(1, BSIC_6BIT, 23)) --> entry returned
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_get(k(1, BSIC_9BIT, 23)) --> entry returned
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }

--- Value ranges
neighbor_ident_add(k(6, BSIC_6BIT, 1 << 6), &lac1) --> expect rc=-ERANGE, got -34
     (empty)
neighbor_ident_add(k(9, BSIC_9BIT, 1 << 9), &lac1) --> expect rc=-ERANGE, got -34
     (empty)
neighbor_ident_add(k(6, BSIC_6BIT, -1), &lac1) --> expect rc=-ERANGE, got -34
     (empty)
neighbor_ident_add(k(9, BSIC_9BIT, -1), &lac1) --> expect rc=-ERANGE, got -34
     (empty)
neighbor_ident_add(k(0, BSIC_NONE, 0), &cgi1) --> expect rc=1, got 1
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(65535, BSIC_NONE, 65535), &lac1) --> expect rc=1, got 1
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 65535 (any BSIC)
     cell_id_list lac[1] = {
       0: 123
     }
neighbor_ident_add(k(0, BSIC_6BIT, 0), &cgi2) --> expect rc=2, got 2
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 65535 (any BSIC)
     cell_id_list lac[1] = {
       0: 123
     }
  2: ARFCN 0 BSIC 0
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
neighbor_ident_add(k(65535, BSIC_6BIT, 0x3f), &lac2) --> expect rc=2, got 2
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 65535 (any BSIC)
     cell_id_list lac[1] = {
       0: 123
     }
  2: ARFCN 0 BSIC 0
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
  3: ARFCN 65535 BSIC 63
     cell_id_list lac[2] = {
       0: 456
       1: 789
     }
neighbor_ident_add(k(0, BSIC_9BIT, 0), &cgi1) --> expect rc=1, got 1
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 65535 (any BSIC)
     cell_id_list lac[1] = {
       0: 123
     }
  2: ARFCN 0 BSIC 0
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
  3: ARFCN 65535 BSIC 63
     cell_id_list lac[2] = {
       0: 456
       1: 789
     }
  4: ARFCN 0 BSIC 0(9bit)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
neighbor_ident_add(k(65535, BSIC_9BIT, 0x1ff), &cgi2) --> expect rc=2, got 2
  0: ARFCN 0 (any BSIC)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  1: ARFCN 65535 (any BSIC)
     cell_id_list lac[1] = {
       0: 123
     }
  2: ARFCN 0 BSIC 0
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }
  3: ARFCN 65535 BSIC 63
     cell_id_list lac[2] = {
       0: 456
       1: 789
     }
  4: ARFCN 0 BSIC 0(9bit)
     cell_id_list cgi[1] = {
        0: 001-02-3-4
     }
  5: ARFCN 65535 BSIC 511(9bit)
     cell_id_list cgi[2] = {
        0: 001-02-3-4
        1: 005-006-7-8
     }

--- size limits
Added first cell identifier list (added 127) --> rc = 127
Added second cell identifier list (tried to add 1) --> rc = -28
